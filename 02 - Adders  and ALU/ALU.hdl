// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */9

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?-

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    // if (zx == 1) reset x
    Extend16(in=zx, out=extzx); // 1-bit nz to 16-bit extended zx
    Not16(in=extzx, out=notextzx); // 16-bit I/O not gate
    And16(a=notextzx, b=x, out=tempx); // 16-bit ANDing


    // if (nx == 1) set x = ~x;
    Extend16(in=nx, out=extnx);
    Xor16(a=extnx, b=tempx, out=tempx2);

    // if (zy == 1) reset y
    Extend16(in=zy, out=extzy); // 1-bit nz to 16-bit eytended nz
    Not16(in=extzy, out=notextzy); // 16-bit I/O not gate
    And16(a=notextzy, b=y, out=tempy); // 16-bit ANDing

    // if (ny == 1) set y = ~y;
    Extend16(in=ny, out=extny);
    Xor16(a=extny, b=tempy, out=tempy2);

    // if (f == 1)  set out = x + y  // integer 2's complement addition
    // if (f == 0)  set out = x & y  // bitwise and
    And16(a=tempx2, b=tempy2, out=out1);
    Add16(a=tempx2, b=tempy2, out=out2);
    Extend16(in=f, out=extf);
    Not16(in=extf, out=notextf);
    And16(a=out1, b=notextf, out=temp5);
    And16(a=out2, b=extf, out=temp6);
    Or16(a=temp5, b=temp6, out=temp7);

    //if (no==1) out = ~out;
    Extend16(in=no, out=extno);
    Xor16(a=temp7, b=extno, out=temp8);
    Buffer16(in=temp8, out=out);
    
    // zr = 1, when all bits of out[16] are zero.
    Not16(in=temp8, out=notout);
    And16Way(in=notout, out=zr);

    // ng = MSB
    MSB(in=temp8, out=ng);
}